setwd("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring")
ls
activity <- read.csv("activity.csv",header = TRUE)
activity <- read.csv("activity.csv",header = TRUE)
activity$date <-date <- as.POSIXct(strptime(activity$date, "%Y-%m-%d"), tz="")
activity$time <- sprintf("%04d", activity$interval)
activity$time <-as.POSIXct(.dates())activity$time, %H%M", tz="")
activity$time <- as.POSIXct(activity$time, %H%M", tz="")
activity$time <- as.POSIXct(activity$time, "%H%M", tz="")
head(activity)
str(activity)
total_number_of_steps_per_day <-aggregate(list(total_steps = activity$steps), by =(list(date = activity$date), FUN = sum, na.rm = TRUE)
total_number_of_steps_per_day <- aggregate(list(total_steps = activity$steps), by =list(date = activity$date), FUN = sum, na.rm = TRUE)
hist(total_number_of_steps_per_day, breaks =30, xlab = "Total Steps", ylab = "Density", main = "Total Steps Per Day", col = "blue" )
hist(total_number_of_steps_per_day$total_steps, breaks =30, xlab = "Total Steps", main = "Total Steps Per Day", col = "blue" )
plot(dencity(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red" )
plot(density(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red" )
plot(density(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red", lwd =3 )
plot(density(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red", lwd =3 )par(mfrow=c(1,1))
plot(density(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red", lwd =3 )par(mfrow=c(1,1))
plot(density(total_number_of_steps_per_day$total_steps,na.rm=TRUE),xlab = "Total Steps", ylab = "Dencity", main = "Total Steps Per Day", col = "red", lwd =3 )
par(mfrow=c(1,1))
mean(total_number_of_steps_per_day$total_steps)
median(total_number_of_steps_per_day$total_steps, na.rm=TRUE)
avg_steps_by_time <-aggregate(list(total_steps = activity$steps), by =(list(time = activity$time), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by =(list(time = activity$time), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by =(list(time = activity$time), interval = activity$interval), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by=(list(time = activity$time, interval = activity$interval), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by=(list(time = activity$time, interval = activity$interval), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by=(list(time = activity$time, interval = activity$interval), FUN = mean, na.rm = TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps), by=(list(time = activity$time, interval = activity$interval), FUN = mean, na.rm = TRUE)
average_steps_by_time <- aggregate(list(average_steps = activity$steps),
by=list(time = activity$time,
interval = activity$interval),
FUN=mean,
na.rm=TRUE)
avg_steps_by_time <- aggregate(list(average_steps = activity$steps),
by=list(time = activity$time,
interval = activity$interval),
FUN=mean,
na.rm=TRUE)
plot(average_steps ~time, data = avg_steps_by_time, xlab="Time interval", ylab = "Mean steps", main = "Mean STeps By Time Interval", type = "1", col = "purple", lwd =2)
plot(average_steps ~time, data = avg_steps_by_time, xlab="Time interval", ylab = "Mean steps", main = "Mean STeps By Time Interval", type = "1", col = "purple", lwd =2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="l",
col="blue",
lwd=2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="l",
col="purple",
lwd=2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="1",
col="purple",
lwd=2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="I",
col="purple",
lwd=2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="1",
col="purple",
lwd=2)
plot(average_steps ~ time,
data=avg_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="l",
col="purple",
lwd=2)
avg_steps_by_time[which.max(avg_steps_by_time$average_steps)]
avg_steps_by_time[which.max(avg_steps_by_time$average_steps),]
(sum(is.na(activity[,"steps"]))
)
sum(is.na(activity[,"steps"]))
# "join" the two data frames using merge()
activity_imputed <- merge(activity,average_steps_by_time,by="interval")
activity_imputed <- within(activity_imputed,
steps <- ifelse(is.na(activity_imputed$steps),
activity_imputed$average_steps,
activity_imputed$steps))
total_steps_by_date_imputed <- aggregate(list(total_steps = activity_imputed$steps),
by=list(date = activity_imputed$date),
FUN=sum,
na.rm=FALSE)
par(mfrow=c(1,2))
# frequencies
hist(total_steps_by_date_imputed$total_steps,
breaks=30,
xlab="Total Steps",
main="Total Steps Per Day",
col="lightblue")
# desnsity
plot(density(total_steps_by_date_imputed$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
mean(total_steps_by_date_imputed$total_steps)
median(total_steps_by_date_imputed$total_steps)
# first add a character column for day of the week
activity_imputed$weekday  <- weekdays(activity_imputed$date)
# now populate a new factor column using day of the week and a simple function
activity_imputed$weekend_indicator <- as.factor(apply(activity_imputed["weekday"], 1, function(x) {
switch(x,
"Sunday" = "weekend",
"Saturday" = "weekend",
"weekday")
}))
str(activity_imputed)
average_steps_by_time_weekend <- aggregate(list(average_steps = activity_imputed$steps),
by=list(time       = activity_imputed$time.x,
daytype    = activity_imputed$weekend_indicator),
FUN=mean)
library(ggplot2)
qplot(x = time,
y = average_steps,
geom="path",
data = average_steps_by_time_weekend,
xlab="Time interval",
ylab="Average steps",
main="Activity Patterns\nWeekdays vs. Weekends",
facets = daytype ~ .)
library(psych)
by(average_steps_by_time_weekend,
average_steps_by_time_weekend$daytype,
FUN=describe)
load("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.git/logs/refs/heads/master")
activity <- read.csv("activity.csv", header=TRUE)
# convert character date to POSIX date
activity$date <- as.POSIXct(strptime(activity$date, "%Y-%m-%d"),tz="")
# first convert integer time to character and pad with leading zeros...
activity$time     <- sprintf("%04d", activity$interval)#C style language, fill in leading zeros
# ...then convert to the date type
activity$time     <- as.POSIXct(activity$time, "%H%M",tz="")
head(activity)
str(activity)
total_steps_by_date <- aggregate(list(total_steps = activity$steps),
by=list(date = activity$date),
FUN=sum,
na.rm=TRUE)
options(device = function(file, width = 7, height = 7, ...) {
windows(width = width, height = height, ...)
})
par(mfrow=c(1,2))# 1 row, 2 columns
# frequencies
hist(total_steps_by_date$total_steps,
breaks=30,
xlab="Total Steps",
main="Total Steps Per Day",
col="lightblue")
# desnsity
plot(density(total_steps_by_date$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
Finally, we'll calculate the me
mean(total_steps_by_date$total_steps)
median(total_steps_by_date$total_steps,na.rm=T)
average_steps_by_time <- aggregate(list(average_steps = activity$steps),
by=list(time = activity$time,
interval = activity$interval),
FUN=mean,
na.rm=TRUE)
plot(average_steps ~ time,
data=average_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="l",
col="blue",
lwd=2)
average_steps_by_time[which.max(average_steps_by_time$average_steps),]
sum(is.na(activity[,"steps"]))
activity_imputed <- merge(activity,average_steps_by_time,by="interval")
# correct the NA steps with average steps for the interval
activity_imputed <- within(activity_imputed,
steps <- ifelse(is.na(activity_imputed$steps),
activity_imputed$average_steps,
activity_imputed$steps))
total_steps_by_date_imputed <- aggregate(list(total_steps = activity_imputed$steps),
by=list(date = activity_imputed$date),
FUN=sum,
na.rm=FALSE)
par(mfrow=c(1,2))
# frequencies
hist(total_steps_by_date_imputed$total_steps,
breaks=30,
xlab="Total Steps",
main="Total Steps Per Day",
col="lightblue")
# desnsity
plot(density(total_steps_by_date_imputed$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
mean(total_steps_by_date_imputed$total_steps)
median(total_steps_by_date_imputed$total_steps)
activity_imputed$weekday  <- weekdays(activity_imputed$date)
activity_imputed$weekend_indicator <- as.factor(apply(activity_imputed["weekday"], 1, function(x) {
switch(x,
"Sunday" = "weekend",
"Saturday" = "weekend",
"weekday")
}))
str(activity_imputed)
average_steps_by_time_weekend <- aggregate(list(average_steps = activity_imputed$steps),
by=list(time       = activity_imputed$time.x,
daytype    = activity_imputed$weekend_indicator),
FUN=mean)
library(ggplot2)
qplot(x = time,
y = average_steps,
geom="path",
data = average_steps_by_time_weekend,
xlab="Time interval",
ylab="Average steps",
main="Activity Patterns\nWeekdays vs. Weekends",
facets = daytype ~ .)
library(psych)
by(average_steps_by_time_weekend,
average_steps_by_time_weekend$daytype,
FUN=describe)
load("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.RData")
load("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.RData")
load("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.RData")
savehistory("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.Rhistory.md")
load("~/GitHub/Reproducable-Research/Reproducable Research/Activity Monitoring/.RData")
View(activity)
View(activity_imputed)
View(average_steps_by_time)
knitr::opts_chunk$set(echo = TRUE)
activity <- read.csv("activity.csv", header=TRUE)
# convert character date to POSIX date
activity$date <- as.POSIXct(strptime(activity$date, "%Y-%m-%d"),tz="")
# first convert integer time to character and pad with leading zeros...
activity$time     <- sprintf("%04d", activity$interval)#C style language, fill in leading zeros
# ...then convert to the date type
activity$time     <- as.POSIXct(activity$time, "%H%M",tz="")
knitr::opts_chunk$set(echo = TRUE)
activity <- read.csv("activity.csv", header=TRUE)
# convert character date to POSIX date
activity$date <- as.POSIXct(strptime(activity$date, "%Y-%m-%d"),tz="")
# first convert integer time to character and pad with leading zeros...
activity$time     <- sprintf("%04d", activity$interval)#C style language, fill in leading zeros
# ...then convert to the date type
activity$time     <- as.POSIXct(activity$time, "%H%M",tz="")
head(activity)
knitr::opts_chunk$set(echo = TRUE)
activity <- read.csv("activity.csv", header=TRUE)
# convert character date to POSIX date
activity$date <- as.POSIXct(strptime(activity$date, "%Y-%m-%d"),tz="")
# first convert integer time to character and pad with leading zeros...
activity$time     <- sprintf("%04d", activity$interval)#C style language, fill in leading zeros
# ...then convert to the date type
activity$time     <- as.POSIXct(activity$time, "%H%M",tz="")
head(activity)
str(activity)
par(mfrow=c(1,1))
hist(total_steps_by_date$total_steps,
breaks=30,
xlab="Total Steps",
main="Total Steps Per Day",
col="lightblue")
plot(density(total_steps_by_date$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
mean(total_steps_by_date$total_steps)
median(total_steps_by_date$total_steps,na.rm=T)
average_steps_by_time <- aggregate(list(average_steps = activity$steps),
by=list(time = activity$time,
interval = activity$interval),
FUN=mean,
na.rm=TRUE)
plot(average_steps ~ time,
data=average_steps_by_time,
xlab="Time interval",
ylab="Mean steps",
main="Mean Steps By Time Interval",
type="l",
col="blue",
lwd=2)
average_steps_by_time[which.max(average_steps_by_time$average_steps),]
sum(is.na(activity[,"steps"]))
activity_imputed$steps))
na.rm=FALSE)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
plot(density(total_steps_by_date_imputed$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
# frequencies
hist(total_steps_by_date_imputed$total_steps,
breaks=30,
xlab="Total Steps",
main="Total Steps Per Day",
col="lightblue")
# desnsity
plot(density(total_steps_by_date_imputed$total_steps,
na.rm=TRUE),
xlab="Total Steps",
ylab="Density",
main="Total Steps Per Day",
col="purple",
lwd=3)
par(mfrow=c(1,1))
# first add a character column for day of the week
activity_imputed$weekday  <- weekdays(activity_imputed$date)
# now populate a new factor column using day of the week and a simple function
activity_imputed$weekend_indicator <- as.factor(apply(activity_imputed["weekday"], 1, function(x) {
switch(x,
"Sunday" = "weekend",
"Saturday" = "weekend",
"weekday")
}))
average_steps_by_time_weekend <- aggregate(list(average_steps = activity_imputed$steps),
by=list(time       = activity_imputed$time.x,
daytype    = activity_imputed$weekend_indicator),
FUN=mean)
library(ggplot2)
qplot(x = time,
y = average_steps,
geom="path",
data = average_steps_by_time_weekend,
xlab="Time interval",
ylab="Average steps",
main="Activity Patterns\nWeekdays vs. Weekends",
facets = daytype ~ .)
